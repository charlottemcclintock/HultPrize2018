"dis_why", "gender", "race", "race_amind", "race_asian", "race_black",
"race_hawpac", "race_white", "race_utd", "race_dec", "race_unknown",
"ftf_count", "ftf_homecount")
# change characters into factors
placement <- placement %>%
mutate(
exit_why = factor(exit_why),
care_type = factor(care_type),
resource_type = factor(resource_type),
resource_cat = factor(resource_cat),
case_id = factor(case_id),
client_id = factor(client_id)
)
# create a new variable for time spent in each foster care placement
time_weeks <- as.numeric(difftime(placement$exit_date, placement$entry_date), units="weeks", na.rm = TRUE)
# add time spent in that placement as a column
placement <- placement %>%
mutate(
time_weeks)
# reorder columns, put time_spent near entry and exit date
placement <-placement[c("case_id", "client_id","entry_date", "exit_date", "time_weeks", "exit_why",
"care_type", "resource_type", "resource_cat", "awol_begin", "awol_end")]
# look at a data summary
summary(placement)
str(placement) ## 17 levels for exit_why, 24 levels for care_type, 12 levels for resource_type
# group together similar case ids
arrange(placement, case_id)
# check number of distinct values
n_distinct(placement$case_id) ## 133
n_distinct(placement$client_id) ## 223
# number of incomplete cases
sum(!complete.cases(subset(placement,select= -c(awol_begin, awol_end)))) ## 102 cases excluding awol columns
# 99 missing exit dates(might be still in placements mentioned) and 3 missing values for care_type.
summary(placement)
placement %>% filter(is.na(care_type))
## might not be a problem because we have a similar column resource_type
# ...........................................................................................................................
# BUILDING USEFUL OBJECTS
# number of clients in each case
clients_per_case <- placement %>%
group_by(case_id) %>%
summarise(clients_by_case = n_distinct(client_id))
# number of placements for each child
num_place <- placement %>%
group_by(case_id, client_id) %>%
summarise(num_placements_client = n())
# number of placements by category
num_place_bycat <- placement %>%
group_by(case_id, client_id, resource_cat) %>%
summarise(num_placements_cat_client = n())
# total time in out of home care, does not include time in ongoing placement
## might not give proper values for clients in care at present and have more than 1 placements
## because it won't add the present time at placement, so ongoing cases are excluded
tic_client <- placement %>%
group_by(case_id, client_id)
time_total <- summarise(tic_client, time_in_care = sum(time_weeks))
# combining all the summarised numbers to the origina dataset using left_join
placement <- left_join(placement,clients_per_case, by=c("case_id" = "case_id"))
placement <- left_join(placement,num_place, by=c("case_id" = "case_id", "client_id"="client_id"))
placement <- left_join(placement,num_place_bycat, by=c("case_id" = "case_id", "client_id"="client_id",
"resource_cat"="resource_cat"))
# ...........................................................................................................................
# FOSTER CARE DATA WITH BASIC PLACEMENT INFORMATION, 223 OBSERVATIONS
# create a new data frame with foster care clients and basic data on placement history
placement_basic <- left_join(num_place,time_total, by=c("case_id" = "case_id", "client_id"="client_id"))
care_placement <- merge(placement_basic, foster_care)
# binary indicator for whether the child is still in the system
care_placement$sys_status <- ifelse(is.na(care_placement$sys_exit), 1, 0)
care_placement <- select(care_placement, case_id, client_id, time_in_care, num_placements_client,
sys_status, everything())
# explore this data a bit
# age of children in foster care
summary(care_placement$age_atcustody)
# number of children of each race in the placement history & foster care data
num_children_byrace <- care_placement %>%
group_by(race) %>%
summarize(byrace = n())
# 5 asian children
# 113 black children
# 51 multi-racial children
# 52 white children
# 2 children with race unknown
# time spent in care by race, excluding cases where the child is still in care
# might not be enough data to draw comparisons, just exploratory
time_byrace <- as.data.frame(care_placement %>% group_by(race) %>%
summarise(mean(time_in_care, na.rm = TRUE),
median(time_in_care, na.rm = TRUE)))
names(time_byrace) <-  c("race", "mean(weeks)","median(weeks)")
## sample size is too small for asian children, unknown
# number of foster care placements by race
## might not be an ideal way of looking since large number of placements for
## few clients can bump up the mean, but median might be a good measure.
placements_byrace <- as.data.frame(care_placement %>% group_by(race) %>%
summarise(mean(num_placements_client),
median(num_placements_client)))
names(placements_byrace) <- c("race", "mean(placements)","median(placements")
# look at some tables by race, for categorical variables
with(care_placement, table(race, dis_why))
with(care_placement, table(race, place_type))
# ..........................................................................................................................
# FOSTER CARE AND PLACEMENT HISTORY TOGETHER, 971 OBSERVATIONS
# combining the foster care and placement history data sets completely
fcare_placehist <- left_join(placement, care_placement, by=c("case_id" = "case_id",
"client_id"="client_id",
"num_placements_client" = "num_placements_client"))
#getting rid of irrelevant columns
fcare_placehist$locality <- NULL
# all localities are charlottesville
fcare_placehist$ssn <- NULL
# one less ssn than client ids, why?
# could remove custody start date
# fcare_placehist$custody_start <- NULL
# arb <- fcare_placehist$sys_entry - fcare_placehist$sys_custody_start, all 0
# binary indicator for whether the child is still in the system
fcare_placehist$sys_status <- ifelse(is.na(fcare_placehist$sys_exit), 1, 0)
# create a dummy data retrieval date
dummy_data_retrieval <- "2017-12-30 23:27:05 UTC"
# create a duration value to include ongoing cases, and end them when the data was retrieved
fcare_placehist$duration <- ifelse(is.na(fcare_placehist$sys_exit), (as.numeric(difftime(dummy_data_retrieval,
fcare_placehist$sys_entry), units="weeks")), as.numeric(difftime(fcare_placehist$sys_exit,
fcare_placehist$sys_entry), units="weeks", na.rm = TRUE))
# moving the variables for clarity
fcare_placehist <- fcare_placehist[c("case_id", "client_id", "entry_date","exit_date", "sys_entry",
"sys_exit", "custody_start", "custody_end","dis_date","sys_status",  "duration",
"time_weeks", "time_in_care", "exit_why", "care_type", "resource_type", "resource_cat",
"place_type", "clients_by_case","num_placements_client", "num_placements_cat_client",
"dis_why", "age_atcustody", "gender", "race", "race_amind", "race_asian",
"race_black", "race_hawpac", "race_white","race_utd", "race_dec", "race_unknown",
"ftf_count", "ftf_homecount", "awol_begin", "awol_end")]
# renaming the variables for clarity
names(fcare_placehist) <- c("case_id", "client_id", "place_entry_date","place_exit_date", "sys_entry",
"sys_exit", "sys_custody_start","sys_custody_end","sys_dis_date","sys_status",
"duration", "time_placement", "time_atexit", "place_exit_why", "place_care_type",
"place_resource_type", "place_resource_cat", "sys_place_type", "clients_by_case",
"num_placements_client", "num_placements_cat_client", "sys_dis_why", "age_atcustody",
"gender", "race", "race_amind", "race_asian", "race_black", "race_hawpac", "race_white",
"race_utd", "race_dec", "race_unknown", "ftf_count", "ftf_homecount",
"awol_begin", "awol_end")
# change characters into factors
fcare_placehist <- fcare_placehist %>%
mutate(
sys_place_type = factor(sys_place_type ),
sys_dis_why = factor(sys_dis_why),
gender = factor(gender),
race = factor(race),
race_dec = factor(race_dec),
race_unknown= factor(race_unknown)
)
# ...........................................................................................................................
# DATA VISUALIZATION
# dismissal from the system by race
p1 <- ggplot(data = fcare_placehist, aes(x = fct_infreq(sys_dis_why)))
p1 + geom_bar(aes(fill = race)) + coord_flip()
p1 + geom_bar(aes(fill = race), position = "fill") + coord_flip()
# placement category by race
p2 <- ggplot(data = fcare_placehist, aes(x = fct_infreq(place_resource_cat)))
p2 + geom_bar(aes(fill = race)) + coord_flip()
p2 + geom_bar(aes(fill = race), position = "fill") + coord_flip()
# ...........................................................................................................................
# list of the important objects
# placement # a cleaned version of the placement history data
# foster_care # a cleaned version of the placement history data
# care_placement # merge of foster_care and placement_basic, 223 rows
# fcare_placehist # merge of foster care and placement history sheets, 971 rows
# saving an image
save.image("placement_history_clean.Rdata")
# Rename the variables
names(ongoing) <- c("locality", "case_type", "case_id", "client_id", "ssn", "age_at_involvement",
"case_type_begin", "case_type_end", "client_involvment_start", "client_involvement_end",
"gender", "primary_ethnicity", "hispanic", "amer_indian", "asian", "black", "pac_islander",
"white", "race_unable", "race_decline", "race_unknown", "face_to_face_cnt")
ongoing <- read_excel("cville_dss_data_2017.xlsx", sheet = 2)
knitr::opts_chunk$set(echo = TRUE, message = FALSE)
library(tidyverse)
library(knitr)
njcc_clean$partyID = factor(njcc_clean$partyID, levels(njcc_clean$partyID)[c(2,4,5,3,1)])
knitr::opts_chunk$set(echo = TRUE, message = FALSE)
library(tidyverse)
library(knitr)
colpol <- c(6, 1, 6, 3, 2, 1, 1, 3, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 2, 1, 1, 1, 2, 1, 1,
1, 1, 1, 1, 1, 1, 1, 4, 30)
colnames <- c("psraid", "sample", "int_date", "area", "state",
"cregion", "density", "usr", "cc1", "cc1a", "cc2",
"cc3", "cc4", "cc5", "cc6", "cc7", "ql1", "ql1a",
"qc1", "hh1", "employ", "par", "sex", "age",
"educ2", "hisp", "race", "inc", "income", "reg",
"party", "partyln", "iphoneus", "hphoneus", "recage",
"receduc", "racethn", "standwt", "raceos")
njcc <- read_fwf("njcc33850.dat", fwf_widths(colpol, colnames))
head(njcc)
colstart <- c(1, 7, 8, 14, 17, 19, 20, 21, 24, 25, 26,
27, 28, 29, 30, 31, 32, 33, 34, 35, 36,
37, 38, 39, 41, 42, 43, 44, 46, 47, 48,
49, 50, 51, 52, 53, 54, 55, 59
)
colend <-   c(6, 7, 13, 16, 18, 19, 20, 23, 24, 25, 26,
27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37,
38, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50,
51, 52, 53, 54, 58, 88)
njcc2 <- read_fwf("njcc33850.dat", fwf_positions(colstart, colend, colnames))
head(njcc2)
njcc_cut <- select(njcc,cc2, cc5, cc6, cc7, employ, par, sex, age, educ2, race, inc, party, partyln )
njcc_clean <- rename(njcc_cut,
raise_min_wage=cc2,
snap_eligibility=cc5,
nominaition_approval_51=cc6,
filibuster_end=cc7,
employ_status=employ,
parent=par,
educ=educ2,
income=inc,
party_lean=partyln)
njcc_clean$age[njcc_clean$age == 99] <- NA
gender <- c("Female","Male")
cc2_label <- c("Consumption inc.", "Costs inc.", "Indifferent")
cc5_label <- c("Support", "Oppose")
cc6_label <- c("Agree", "Disagree")
cc7_label <- c("Status Quo", "Decrease Votes")
employ_label <- c("Full-time", "Part-time", "Unemployed")
parent_label <- c("Yes","No")
njcc_clean <- mutate(njcc_clean,
sex = factor(sex, labels=gender),
raise_min_wage =
factor(raise_min_wage, labels=cc2_label, exclude = 9),
snap_eligibility =
factor(snap_eligibility, labels=cc5_label, exclude = 9),
nominaition_approval_51 =
factor(nominaition_approval_51, labels=cc6_label, exclude = 9),
filibuster_end =
factor(filibuster_end, labels=cc7_label, exclude = 9),
employ_status =
factor(employ_status, labels=employ_label, exclude = 9),
parent =
factor(parent, labels=parent_label, exclude = 9))
njcc_clean$educ <-as.factor(njcc_clean$educ)
njcc_clean$educ[njcc_clean$educ == 9] <- NA
njcc_clean<- mutate(njcc_clean,
educ=fct_recode(educ,
"Incomplete Highschool" =  "1",
"Incomplete Highschool" = "2",
"Highschool Grad or Some College" = "3",
"Highschool Grad or Some College" = "4",
"College Degree or Some Post-Grad" =  "5",
"College Degree or Some Post-Grad" =  "6",
"College Degree or Some Post-Grad" =  "7",
"Post-Grad Degree" =  "8"))
njcc_clean$income <-as.factor(njcc_clean$income)
njcc_clean$income[njcc_clean$income == 99] <- NA
njcc_clean<- mutate(njcc_clean,
income=fct_recode(income,
"Less than $50,000" = "1",
"Less than $50,000" = "2",
"Less than $50,000" = "3",
"Less than $50,000" = "4",
"Less than $50,000" = "5",
"Between $50,000 and $100,000" = "6",
"Between $50,000 and $100,000" = "7",
"Over $100,000" = "8",
"Over $100,000" = "9"
))
njcc_clean$race <-as.factor(njcc_clean$race)
njcc_clean$race[njcc_clean$race == 9] <- NA
njcc_clean<- mutate(njcc_clean,
race=fct_recode(race,
"White" =  "1",
"Black or African-American" = "2",
"Asian or Pacific Islander" = "3",
"Other" = "4",
"Other" = "5",
"Other" = "6"
))
njcc_clean$party <- as.factor(njcc_clean$party)
njcc_clean$party_lean <- as.factor(njcc_clean$party_lean)
njcc_clean <- unite(njcc_clean, "partyID", c("party", "party_lean"), remove = FALSE)
njcc_clean$partyID[njcc_clean$partyID == "9_9"] <- NA
njcc_clean<- mutate(njcc_clean,
partyID=fct_recode(partyID,
"Republican" =  "1_NA",
"Democrat" = "2_NA",
"Leans Democrat" = "3_2",
"Leans Democrat" = "9_2",
"Leans Democrat" = "4_2",
"Leans Democrat" = "5_2",
"Leans Republican" = "3_1",
"Leans Republican" = "4_1",
"Leans Republican" = "5_1",
"Leans Republican" = "9_1",
"Independent" = "3_9",
"Independent" = "4_9",
"Independent" = "5_9"
))
# kwh per capita vs. gdp per capita
ggplot(data = power, mapping = aes(kwh, gdp_percap), na.rm = TRUE) +
geom_point(aes(colour = factor(income_group)), size = 2) +
geom_smooth(method = "lm", se = FALSE) + coord_cartesian(xlim = c(0,125000),
ylim=c(0,25000)) + labs(colour = "Income Level",
title = "GDP per Capita vs. kWh per Capita",
caption = "based on most recent available data from the World Bank (2014)",
x = "GDP per Capita",
y = "Electric power consumption (kWh per capita)")
# kwh per capita vs. gdp per capita
ggplot(data = power, mapping = aes(kwh, gdp_percap), na.rm = TRUE) +
geom_point(aes(colour = factor(income_group)), size = 2) +
geom_smooth(method = "lm", se = FALSE) + coord_cartesian(xlim = c(0,125000),
ylim=c(0,25000)) + labs(colour = "Income Level",
title = "Electric power consumption vs. GDP per Capita",
caption = "based on most recent available data from the World Bank (2014)",
y = "GDP per Capita",
x = "Electric power consumption (kWh per capita)")
# C. McClintock
# Electricity Theft
# Feb. 21st, 2018
# ......................................................................................................
# DATA IMPORT & CLEANING
# set up
getwd()
setwd("/Users/charmed33/R/HultPrize2018")
# libraries
library(tidyverse)
library(dplyr)
# read in the data, all from the world bank
powerloss <- read_csv("electric_loss.csv", skip = 4)
# Electric power transmission and distribution losses (% of output)
access <- read_csv("access.csv", skip = 4)
# Access to electricity (% of population)
population <- read_csv("population.csv", skip = 4)
# Population, total
kwh <- read_csv("kwhpercap.csv", skip = 4)
# Electric power consumption (kWh per capita)
gdp <- read_csv("gdp.csv", skip = 4)
# GDP (current US$)
countries <- read_csv("wb_countrydata.csv")
# Children out of school, female (% of female primary school age)
girlsed <- read_csv("girlsed.csv", skip = 4)
# change some names, use data from 2014, last available
colnames(powerloss)[colnames(powerloss)=="Country Name"] <- "country"
colnames(powerloss)[colnames(powerloss)=="Country Code"] <- "country_code"
colnames(powerloss)[colnames(powerloss)=="2014"] <- "percentloss"
colnames(population)[colnames(population)=="Country Name"] <- "country"
colnames(population)[colnames(population)=="Country Code"] <- "country_code"
colnames(population)[colnames(population)=="2014"] <- "population"
colnames(gdp)[colnames(gdp)=="Country Name"] <- "country"
colnames(gdp)[colnames(gdp)=="Country Code"] <- "country_code"
colnames(gdp)[colnames(gdp)=="2014"] <- "gdp"
colnames(kwh)[colnames(kwh)=="Country Name"] <- "country"
colnames(kwh)[colnames(kwh)=="Country Code"] <- "country_code"
colnames(kwh)[colnames(kwh)=="2014"] <- "kwh"
colnames(access)[colnames(access)=="Country Name"] <- "country"
colnames(access)[colnames(access)=="Country Code"] <- "country_code"
colnames(access)[colnames(access)=="2014"] <- "access"
colnames(girlsed)[colnames(girlsed)=="Country Name"] <- "country"
colnames(girlsed)[colnames(girlsed)=="Country Code"] <- "country_code"
colnames(girlsed)[colnames(girlsed)=="2014"] <- "girlsed"
names(countries) <- c("country_code","region","income_group","country")
# select the 2014 data
powerloss <- select(powerloss, country, country_code, percentloss)
population <- select(population, country, country_code, population)
gdp <- select(gdp, country, country_code, gdp)
kwh <- select(kwh, country, country_code, kwh)
access <- select(access, country, country_code, access)
girlsed <- select(girlsed, country, country_code, girlsed)
# merge it all together
power <- left_join(powerloss, countries, by =
c("country_code" = "country_code","country" = "country"))
power <- left_join(power, population, by =
c("country_code" = "country_code", "country" = "country"))
power <- left_join(power, gdp, by =
c("country_code" = "country_code", "country" = "country"))
power <- left_join(power, kwh, by =
c("country_code" = "country_code", "country" = "country"))
power <- left_join(power, access, by =
c("country_code" = "country_code", "country" = "country"))
power <- left_join(power, girlsed, by =
c("country_code" = "country_code", "country" = "country"))
# create gdp per capita by dividing gdp by population
power <- mutate(power, gdp_percap = gdp / population)
power <- select(power, country, country_code, region,
income_group, gdp, gdp_percap, population, everything())
power <- power[complete.cases(power[ , 3]),]
power$income_group <- as.factor(power$income_group)
power <- mutate(power,
income_group=fct_relevel(income_group,
"Low income",
"Lower middle income",
"Upper middle income",
"High income"))
# .......................................................................................................
# EXPLORATORY DATA ANALYSIS
# how much electricity is being lost?
summary(power$percentloss) # average of 13 percent loss, much higher in poor countries
summary(power$gdp_percap)
# how does that vary by income group?
## average use by income group
kwhbyincome <- as.data.frame(power %>%
group_by(income_group) %>%
summarise(mean(kwh, na.rm = TRUE)))
## average percent loss by income group
percentbyincome <- as.data.frame(power %>%
group_by(income_group) %>%
summarise(mean(percentloss, na.rm = TRUE)))
## number of countries in each income group
numbyincome <- as.data.frame(power %>%
group_by(income_group) %>%
summarise(byincome = n()))
## number of countries in each income group
percentbyregion <- as.data.frame(power %>%
group_by(region) %>%
summarise(mean(percentloss, na.rm = TRUE)))
# generalized linear models
# gdp per capita vs. percent loss
gdp_percentloss <- glm(gdp_percap ~ percentloss, data = power)
summary(gdp_percentloss) # intercept = 28953.6, slope = -851.6, p < .001
# kwh per capita vs. percent loss
percentloss_kwh <-  glm(kwh ~ percentloss, data = power)
summary(percentloss_kwh) # intercept = 6866.62, slope =-184.9, p < .001
# kwh per capita vs. gdp per capita
gdp_kwh <-  glm(kwh ~ gdp_percap, data = power)
summary(gdp_kwh) # intercept = 1134, slope = .1845, p < .001
# access vs. loss
access_loss <- glm(access ~ kwh, data = power)
summary(access_loss) # intercept = 82.16, slope = .00132, p < .001
# ......................................................................................................
# VISUALIZATION
# gdp per capita vs. percent loss
ggplot(data = power, mapping = aes(gdp_percap, percentloss, na.rm = TRUE)) +
geom_point(aes(colour = factor(income_group)), size = 2) + geom_smooth(se = FALSE) +
coord_cartesian(xlim = c(0, 125000)) + labs(colour = "Income Level",
title = "GDP per Capita vs. Transmission & Distribution Loss (% of output)",
caption = "based on most recent available data from the World Bank (2014)",
x = "GDP per Capita (US$)",
y = "Electric power transmission and distribution losses (% of output)")
# kwh per capita vs. percent loss
ggplot(data = power, mapping = aes(kwh, percentloss, na.rm = TRUE)) +
geom_point(aes(colour = factor(income_group)), size = 2) + geom_smooth(se = FALSE) +
coord_cartesian(xlim = c(0, 25000)) + labs(colour = "Income Level",
title = "kWh per Capita vs. Transmission & Distribution Loss (% of output)",
caption = "based on most recent available data from the World Bank (2014)",
x = "Electric power consumption (kWh per capita)",
y = "Electric power losses (% of output)")
# kwh per capita vs. gdp per capita
ggplot(data = power, mapping = aes(kwh, gdp_percap), na.rm = TRUE) +
geom_point(aes(colour = factor(income_group)), size = 2) +
geom_smooth(method = "lm", se = FALSE) + coord_cartesian(xlim = c(0,125000),
ylim=c(0,25000)) + labs(colour = "Income Level",
title = "Electric power consumption vs. GDP per Capita",
caption = "based on most recent available data from the World Bank (2014)",
y = "GDP per Capita",
x = "Electric power consumption (kWh per capita)")
# kwh per capita vs. percent access
ggplot(data = power, mapping = aes(access, kwh), na.rm = TRUE) +
geom_point(aes(colour = factor(income_group)), size = 2) +
coord_cartesian(ylim = c(0,25000)) +
labs(colour = "Income Level",
title = "Percent Access to Electricity vs. kWh per Capita",
caption = "based on most recent available data from the World Bank (2014)",
x = "Access to Electricity(%)",
y = "Electric power consumption (kWh per capita)")
# kwh per capita vs. gdp per capita
ggplot(data = power, mapping = aes(kwh, gdp_percap), na.rm = TRUE) +
geom_point(aes(colour = factor(income_group)), size = 2) +
geom_smooth(method = "lm", se = FALSE) + coord_cartesian(xlim = c(0,125000),
ylim=c(0,25000)) + labs(colour = "Income Level",
title = "Electric power consumption vs. GDP per Capita",
caption = "based on most recent available data from the World Bank (2014)",
y = "GDP per Capita",
x = "Electric power consumption (kWh per capita)")
# kwh per capita vs. gdp per capita
ggplot(data = power, mapping = aes(kwh, gdp_percap), na.rm = TRUE) +
geom_point(aes(colour = factor(income_group)), size = 2) +
geom_smooth(method = "lm", se = FALSE) + coord_cartesian(xlim = c(0,125000),
xlim=c(0,25000)) + labs(colour = "Income Level",
title = "Electric power consumption vs. GDP per Capita",
caption = "based on most recent available data from the World Bank (2014)",
y = "GDP per Capita",
x = "Electric power consumption (kWh per capita)")
# kwh per capita vs. gdp per capita
ggplot(data = power, mapping = aes(kwh, gdp_percap), na.rm = TRUE) +
geom_point(aes(colour = factor(income_group)), size = 2) +
geom_smooth(method = "lm", se = FALSE) + coord_cartesian(
xlim=c(0,25000)) + labs(colour = "Income Level",
title = "Electric power consumption vs. GDP per Capita",
caption = "based on most recent available data from the World Bank (2014)",
y = "GDP per Capita",
x = "Electric power consumption (kWh per capita)")
# kwh per capita vs. gdp per capita
ggplot(data = power, mapping = aes(kwh, gdp_percap), na.rm = TRUE) +
geom_point(aes(colour = factor(income_group)), size = 2) +
geom_smooth(method = "lm", se = FALSE) + coord_cartesian(ylim = c(0,125000)
xlim=c(0,25000)) + labs(colour = "Income Level",
title = "Electric power consumption vs. GDP per Capita",
caption = "based on most recent available data from the World Bank (2014)",
y = "GDP per Capita",
x = "Electric power consumption (kWh per capita)")
# kwh per capita vs. gdp per capita
ggplot(data = power, mapping = aes(kwh, gdp_percap), na.rm = TRUE) +
geom_point(aes(colour = factor(income_group)), size = 2) +
geom_smooth(method = "lm", se = FALSE) + coord_cartesian(ylim = c(0,125000),
xlim=c(0,25000)) + labs(colour = "Income Level",
title = "Electric power consumption vs. GDP per Capita",
caption = "based on most recent available data from the World Bank (2014)",
y = "GDP per Capita",
x = "Electric power consumption (kWh per capita)")
# kwh per capita vs. gdp per capita
ggplot(data = power, mapping = aes(kwh, gdp_percap), na.rm = TRUE) +
geom_point(aes(colour = factor(income_group)), size = 2) + coord_cartesian(ylim = c(0,125000),
xlim=c(0,25000)) + labs(colour = "Income Level",
title = "Electric power consumption vs. GDP per Capita",
caption = "based on most recent available data from the World Bank (2014)",
y = "GDP per Capita",
x = "Electric power consumption (kWh per capita)")
